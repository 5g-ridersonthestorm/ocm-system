//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace OCM.Model.OCPI
{
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Version 
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VersionDetail 
    {
        /// <summary>The Module identifiers for each endpoint are in the beginning of each *Module* chapter. The following table contains the list of modules in this version of OCPI. Most modules (except [Credentials &amp; registration](credentials.md#credentials-endpoint)) are optional, but there might be dependencies between modules, if so that will be mentioned in the module description.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Endpoint> Endpoints { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Endpoint 
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ModuleID Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ModuleID
    {
        [System.Runtime.Serialization.EnumMember(Value = @"cdrs")]
        Cdrs = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"commands")]
        Commands = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"credentials")]
        Credentials = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"locations")]
        Locations = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sessions")]
        Sessions = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tariffs")]
        Tariffs = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tokens")]
        Tokens = 6,
    
    }
    
    /// <summary>The `party_id` and `country_code` are provided here to inform a server about the `party_id` and `country_code` a client will use when pushing [client owned objects](transport_and_format.md#client-owned-object-push). This helps a server determine the URLs a client will use when pushing a [client owned object](transport_and_format.md#client-owned-object-push).
    /// The `country_code` is added the make certain the URL used when pushing a [client owned object](transport_and_format.md#client-owned-object-push) is unique, there might be multiple parties in the world with the same `party_id`, but the combination should always be unique.
    /// A party operating in multiple countries can always use the home country of the company for all connections. For example: an OCPI implementation might push EVSE IDs from a company for different countries, preventing an OCPI connection per country a company is operating in.
    /// The `party_id` and `country_code` give here, have no direct link with the eMI3 EVSE IDs and Contract IDs that might be used in the different OCPI modules. For example: an implementation OCPI might push EVSE IDs with a different eMI3 `spot operator`, then the OCPI `party_id` and/or different `country_code`.
    /// ## Example
    /// ```json {
    ///     "url": "https://example.com/ocpi/cpo/",
    ///     "token": "ebf3b399-779f-4497-9b9d-ac6ad3cc44d2",
    ///     "party_id": "EXA",
    ///     "country_code": "NL",
    ///     "business_details": {
    ///         "name": "Example Operator",
    ///         "logo": {
    ///             "url": "https://example.com/img/logo.jpg",
    ///             "thumbnail": "https://example.com/img/logo_thumb.jpg",
    ///             "category": "OPERATOR",
    ///             "type": "jpeg",
    ///             "width": 512,
    ///             "height": 512
    ///         },
    ///         "website": "http://example.com"
    ///     }
    /// }
    /// ```
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Credentials 
    {
        /// <summary>The token for the other party to authenticate in your system.</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Token { get; set; }
    
        /// <summary>The URL to your API versions endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>Details of this party.</summary>
        [Newtonsoft.Json.JsonProperty("business_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessDetails Business_details { get; set; }
    
        /// <summary>CPO or eMSP ID of this party. (following the 15118 ISO standard).</summary>
        [Newtonsoft.Json.JsonProperty("party_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9]{1,3}$")]
        public string Party_id { get; set; }
    
        /// <summary>Country code of the country this party is operating in.</summary>
        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z]{2}$")]
        public string Country_code { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BusinessDetails 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Website { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Logo { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Image 
    {
        /// <summary>URL from where the image data can be fetched through a web browser.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>URL from where a thumbnail of the image can be fetched through a webbrowser.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }
    
        /// <summary>Describes what the image is used for.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageCategory Category { get; set; }
    
        /// <summary>Image type like gif, jpeg, png, svg</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>int(5) Width of the full scale image</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Width { get; set; }
    
        /// <summary>int(5) Height of the full scale image</summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Height { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>CHARGER   Photo of the physical device that contains one or more EVSEs.
    /// ENTRANCE  Location entrance photo. Should show the car entrance to the location from street side.
    /// LOCATION  Location overview photo.
    /// NETWORK   logo of an associated roaming network to be displayed with the EVSE for example in lists, maps and detailed information view
    /// OPERATOR  logo of the charge points operator, for example a municipality, to be displayed with the EVSEs detailed information view or in lists and maps, if no networkLogo is present
    /// OTHER     Other
    /// OWNER     logo of the charge points owner, for example a local store, to be displayed with the EVSEs detailed information view
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ImageCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHARGER")]
        CHARGER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENTRANCE")]
        ENTRANCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOCATION")]
        LOCATION = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NETWORK")]
        NETWORK = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OWNER")]
        OWNER = 6,
    
    }
    
    /// <summary>ON_STREET Parking in public space. PARKING_GARAGE Multistorey car park. UNDERGROUND_GARAGE Multistorey car park, mainly underground. PARKING_LOT A cleared area that is intended for parking vehicles, i.e. at super markets, bars, etc. OTHER None of the given possibilities. UNKNOWN Parking location type is not known by the operator (default).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LocationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ON_STREET")]
        ON_STREET = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARKING_GARAGE")]
        PARKING_GARAGE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDERGROUND_GARAGE")]
        UNDERGROUND_GARAGE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARKING_LOT")]
        PARKING_LOT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoLocation 
    {
        /// <summary>Latitude of the point in decimal degree. Example: 50.770774. Decimal separator: "." Regex: -?[0-9]{1,2}\.[0-9]{6}</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"-?[0-9]{1,2}\.[0-9]{6}")]
        public string Latitude { get; set; }
    
        /// <summary>Longitude of the point in decimal degree. Example: -126.104965. Decimal separator: "." Regex: -?[0-9]{1,3}\.[0-9]{6}</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"-?[0-9]{1,3}\.[0-9]{6}")]
        public string Longitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalGeoLocation : GeoLocation
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayText Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DisplayText 
    {
        /// <summary>Language Code ISO 639-1</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Za-z]{2}$")]
        public string Language { get; set; }
    
        /// <summary>Text to be displayed to a end user. No markup, html etc. allowed.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,255}$")]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>| Value              | Description                                                                                     |
    /// |--------------------|-------------------------------------------------------------------------------------------------|
    /// | AVAILABLE          | The EVSE/Connector is able to start a new charging session.                                     |
    /// | BLOCKED            | The EVSE/Connector is not accessible because of a physical barrier, i.e. a car.                 |
    /// | CHARGING           | The EVSE/Connector is in use.                                                                   |
    /// | INOPERATIVE        | The EVSE/Connector is not yet active or it is no longer available (deleted).                    |
    /// | OUTOFORDER         | The EVSE/Connector is currently out of order.                                                   |
    /// | PLANNED            | The EVSE/Connector is planned, will be operating soon                                           |
    /// | REMOVED            | The EVSE/Connector/charge point is discontinued/removed.                                        |
    /// | RESERVED           | The EVSE/Connector is reserved for a particular EV driver and is unavailable for other drivers. |
    /// | UNKNOWN            | No status information available. (Also used when offline)                                       |      enum:
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED")]
        BLOCKED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHARGING")]
        CHARGING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INOPERATIVE")]
        INOPERATIVE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OUTOFORDER")]
        OUTOFORDER = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLANNED")]
        PLANNED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMOVED")]
        REMOVED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESERVED")]
        RESERVED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StatusSchedule 
    {
        /// <summary>Begin of the scheduled period.</summary>
        [Newtonsoft.Json.JsonProperty("period_begin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Period_begin { get; set; }
    
        /// <summary>End of the scheduled period, if known.</summary>
        [Newtonsoft.Json.JsonProperty("period_end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Period_end { get; set; }
    
        /// <summary>value during the scheduled period.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>| Value                                    | Description                                          |
    /// |------------------------------------------|------------------------------------------------------|
    /// | CHARGING_PROFILE_CAPABLE                 | The EVSE supports charging profiles. Sending Charging Profiles is not yet supported by OCPI. |
    /// | CREDIT_CARD_PAYABLE                      | Charging at this EVSE can be payed with credit card. |
    /// | REMOTE_START_STOP_CAPABLE                | The EVSE can remotely be started/stopped.            |
    /// | RESERVABLE                               | The EVSE can be reserved.                            |
    /// | RFID_READER                              | Charging at this EVSE can be authorized with a RFID token  |
    /// | UNLOCK_CAPABLE                           | Connectors have mechanical lock that can be requested by the eMSP to be unlocked. |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Capability
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHARGING_PROFILE_CAPABLE")]
        CHARGING_PROFILE_CAPABLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CREDIT_CARD_PAYABLE")]
        CREDIT_CARD_PAYABLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMOTE_START_STOP_CAPABLE")]
        REMOTE_START_STOP_CAPABLE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESERVABLE")]
        RESERVABLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RFID_READER")]
        RFID_READER = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNLOCK_CAPABLE")]
        UNLOCK_CAPABLE = 5,
    
    }
    
    /// <summary>| Value  | Description |
    /// |--------|------------------------------------------------------------------|
    /// | SOCKET | The connector is a socket; the EV user needs to bring a fitting plug. |
    /// | CABLE  | The connector is an attached cable; the EV users car needs to have a fitting inlet. |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConnectorFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SOCKET")]
        SOCKET = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CABLE")]
        CABLE = 1,
    
    }
    
    /// <summary>| Value                 | Description |
    /// |-----------------------|-------------------------------------------------------------------|
    /// | CHADEMO               | The connector type is CHAdeMO, DC |
    /// | DOMESTIC_A            | Standard/Domestic household, type "A", NEMA 1-15, 2 pins |
    /// | DOMESTIC_B            | Standard/Domestic household, type "B", NEMA 5-15, 3 pins |
    /// | DOMESTIC_C            | Standard/Domestic household, type "C", CEE 7/17, 2 pins |
    /// | DOMESTIC_D            | Standard/Domestic household, type "D", 3 pin |
    /// | DOMESTIC_E            | Standard/Domestic household, type "E", CEE 7/5 3 pins |
    /// | DOMESTIC_F            | Standard/Domestic household, type "F", CEE 7/4, Schuko, 3 pins |
    /// | DOMESTIC_G            | Standard/Domestic household, type "G", BS 1363, Commonwealth, 3 pins |
    /// | DOMESTIC_H            | Standard/Domestic household, type "H", SI-32, 3 pins |
    /// | DOMESTIC_I            | Standard/Domestic household, type "I", AS 3112, 3 pins |
    /// | DOMESTIC_J            | Standard/Domestic household, type "J", SEV 1011, 3 pins |
    /// | DOMESTIC_K            | Standard/Domestic household, type "K", DS 60884-2-D1, 3 pins |
    /// | DOMESTIC_L            | Standard/Domestic household, type "L", CEI 23-16-VII, 3 pins |
    /// | IEC_60309_2_single_16 | IEC 60309-2 Industrial Connector single phase 16  Amperes (usually blue) |
    /// | IEC_60309_2_three_16  | IEC 60309-2 Industrial Connector three phase 16  Amperes (usually red) |
    /// | IEC_60309_2_three_32  | IEC 60309-2 Industrial Connector three phase 32  Amperes (usually red) |
    /// | IEC_60309_2_three_64  | IEC 60309-2 Industrial Connector three phase 64  Amperes (usually red) |
    /// | IEC_62196_T1          | IEC 62196 Type 1 "SAE J1772" |
    /// | IEC_62196_T1_COMBO    | Combo Type 1 based, DC |
    /// | IEC_62196_T2          | IEC 62196 Type 2 "Mennekes" |
    /// | IEC_62196_T2_COMBO    | Combo Type 2 based, DC |
    /// | IEC_62196_T3A         | IEC 62196 Type 3A |
    /// | IEC_62196_T3C         | IEC 62196 Type 3C "Scame" |
    /// | TESLA_R               | Tesla Connector "Roadster"-type (round, 4 pin) |
    /// | TESLA_S               | Tesla Connector "Model-S"-type (oval, 5 pin) |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConnectorType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHADEMO")]
        CHADEMO = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_A")]
        DOMESTIC_A = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_B")]
        DOMESTIC_B = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_C")]
        DOMESTIC_C = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_D")]
        DOMESTIC_D = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_E")]
        DOMESTIC_E = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_F")]
        DOMESTIC_F = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_G")]
        DOMESTIC_G = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_H")]
        DOMESTIC_H = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_I")]
        DOMESTIC_I = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_J")]
        DOMESTIC_J = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_K")]
        DOMESTIC_K = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOMESTIC_L")]
        DOMESTIC_L = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_60309_2_single_16")]
        IEC_60309_2_single_16 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_60309_2_three_16")]
        IEC_60309_2_three_16 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_60309_2_three_32")]
        IEC_60309_2_three_32 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_60309_2_three_64")]
        IEC_60309_2_three_64 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_62196_T1")]
        IEC_62196_T1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_62196_T1_COMBO")]
        IEC_62196_T1_COMBO = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_62196_T2")]
        IEC_62196_T2 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_62196_T2_COMBO")]
        IEC_62196_T2_COMBO = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_62196_T3A")]
        IEC_62196_T3A = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IEC_62196_T3C")]
        IEC_62196_T3C = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TESLA_R")]
        TESLA_R = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TESLA_S")]
        TESLA_S = 24,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnergyMix 
    {
        /// <summary>True if 100% from regenerative sources. (CO2 and nuclear waste is zero)                         |</summary>
        [Newtonsoft.Json.JsonProperty("is_green_energy", Required = Newtonsoft.Json.Required.Always)]
        public bool Is_green_energy { get; set; }
    
        /// <summary>Key-value pairs (enum + percentage) of energy sources of this location's tariff.                |</summary>
        [Newtonsoft.Json.JsonProperty("energy_sources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnergySource Energy_sources { get; set; }
    
        /// <summary>Key-value pairs (enum + percentage) of nuclear waste and CO2 exhaust of this location's tariff. |</summary>
        [Newtonsoft.Json.JsonProperty("environ_impact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EnvironmentalImpact Environ_impact { get; set; }
    
        /// <summary>Name of the energy supplier, delivering the energy for this location or tariff.*                |</summary>
        [Newtonsoft.Json.JsonProperty("supplier_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,64}$")]
        public string Supplier_name { get; set; }
    
        /// <summary>Name of the energy suppliers product/tariff plan used at this location.*                        |</summary>
        [Newtonsoft.Json.JsonProperty("energy_product_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,64}$")]
        public string Energy_product_name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnergySource 
    {
        /// <summary>The type of energy source.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnergySourceCategory? Source { get; set; }
    
        /// <summary>Percentage of this source (0-100) in the mix.</summary>
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Percentage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>| Value                  | Description                                  |
    /// |------------------------|----------------------------------------------|
    /// | NUCLEAR                | Nuclear power sources.                       |
    /// | GENERAL_FOSSIL         | All kinds of fossil power sources.           |
    /// | COAL                   | Fossil power from coal.                      |
    /// | GAS                    | Fossil power from gas.                       |
    /// | GENERAL_GREEN          | All kinds of regenerative power sources.     |
    /// | SOLAR                  | Regenerative power from PV.                  |
    /// | WIND                   | Regenerative power from wind turbines.       |
    /// | WATER                  | Regenerative power from water turbines.      |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EnergySourceCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NUCLEAR")]
        NUCLEAR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_FOSSIL")]
        GENERAL_FOSSIL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COAL")]
        COAL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GAS")]
        GAS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GENERAL_GREEN")]
        GENERAL_GREEN = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SOLAR")]
        SOLAR = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WIND")]
        WIND = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WATER")]
        WATER = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EnvironmentalImpact 
    {
        /// <summary>The category of this value.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnvironmentalImpactCategory Source { get; set; }
    
        /// <summary>Amount of this portion in g/kWh.</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>| Value                      | Description                                                                           |
    /// |----------------------------|---------------------------------------------------------------------------------------|
    /// | NUCLEAR_WASTE              | Produced nuclear waste in gramms per kilowatthour.                                    |
    /// | CARBON_DIOXIDE             | Exhausted carbon dioxide in gramms per kilowarrhour.                                  |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum EnvironmentalImpactCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NUCLEAR_WASTE")]
        NUCLEAR_WASTE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CARBON_DIOXIDE")]
        CARBON_DIOXIDE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Connector 
    {
        /// <summary>Identifier of the connector within the EVSE. Two connectors may have the same id as long as they do not belong to the same *EVSE* object. |</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,36}$")]
        public string Id { get; set; }
    
        /// <summary>The standard of the installed connector.</summary>
        [Newtonsoft.Json.JsonProperty("standard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectorType Standard { get; set; }
    
        /// <summary>The format (socket/cable) of the installed connector.</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectorFormat Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("power_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PowerType Power_type { get; set; }
    
        /// <summary>Voltage of the connector (line to neutral for AC_3_PHASE), in volt [V].</summary>
        [Newtonsoft.Json.JsonProperty("voltage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Voltage { get; set; }
    
        /// <summary>maximum amperage of the connector, in ampere [A].                       |</summary>
        [Newtonsoft.Json.JsonProperty("amperage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Amperage { get; set; }
    
        /// <summary>Identifier of the current charging tariff structure. For a "Free of Charge" tariff this field should be set, and point to a defined "Free of Charge" tariff. |</summary>
        [Newtonsoft.Json.JsonProperty("tariff_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,36}$")]
        public string Tariff_id { get; set; }
    
        /// <summary>URL to the operator's terms and conditions.                             |</summary>
        [Newtonsoft.Json.JsonProperty("terms_and_conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Terms_and_conditions { get; set; }
    
        /// <summary>Timestamp when this Connectors was last updated (or created).           |</summary>
        [Newtonsoft.Json.JsonProperty("last_updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Last_updated { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>| Value             | Description                                                              |
    /// |-------------------|--------------------------------------------------------------------------|
    /// | AC_1_PHASE        | AC mono phase.                                                           |
    /// | AC_3_PHASE        | AC 3 phase.                                                              |
    /// | DC                | Direct Current.                                                          |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PowerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AC_1_PHASE")]
        AC_1_PHASE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AC_3_PHASE")]
        AC_3_PHASE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DC")]
        DC = 2,
    
    }
    
    /// <summary>| Value               | Description                                                              |
    /// |:--------------------|:-------------------------------------------------------------------------|
    /// | EV_ONLY             |  Reserved parking spot for electric vehicles.                            |
    /// | PLUGGED             |  Parking is only allowed while plugged in (charging).                       |
    /// | DISABLED            |  Reserved parking spot for disabled people with valid ID.                |
    /// | CUSTOMERS           |  Parking spot for customers/guests only, for example in case of a hotel or shop.|
    /// | MOTORCYCLES         |  Parking spot only suitable for (electric) motorcycles or scooters.      |
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParkingRestriction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EV_ONLY")]
        EV_ONLY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLUGGED")]
        PLUGGED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMERS")]
        CUSTOMERS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MOTORCYCLES")]
        MOTORCYCLES = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EVSE 
    {
        /// <summary>Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). For example a database unique ID or the "EVSE ID". This field can never be changed, modified or renamed. This is the 'technical' identification of the EVSE, not to be used as 'human readable' identification, use the field: evse_id for that.</summary>
        [Newtonsoft.Json.JsonProperty("uid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,39}$")]
        public string Uid { get; set; }
    
        /// <summary>Compliant with the following specification for EVSE ID from "eMI3 standard version V1.0" (http://emi3group.com/documents-links/) "Part 2: business objects." Optional because: if an EVSE ID is to be re-used the EVSE ID can be removed from an EVSE that is removed (status: REMOVED)</summary>
        [Newtonsoft.Json.JsonProperty("evse_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,48}$")]
        public string Evse_id { get; set; }
    
        /// <summary>Indicates the current status of the EVSE.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Status Status { get; set; }
    
        /// <summary>Indicates a planned status in the future of the EVSE.</summary>
        [Newtonsoft.Json.JsonProperty("status_schedule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusSchedule Status_schedule { get; set; }
    
        /// <summary>List of functionalities that the EVSE is capable of.</summary>
        [Newtonsoft.Json.JsonProperty("capabilities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Capability> Capabilities { get; set; }
    
        /// <summary>List of available connectors on the EVSE.</summary>
        [Newtonsoft.Json.JsonProperty("connectors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connector> Connectors { get; set; }
    
        /// <summary>Level on which the charging station is located (in garage buildings) in the locally displayed numbering scheme.</summary>
        [Newtonsoft.Json.JsonProperty("floor_level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,4}$")]
        public string Floor_level { get; set; }
    
        /// <summary>Coordinates of the EVSE.</summary>
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Coordinates { get; set; }
    
        /// <summary>A number/string printed on the outside of the EVSE for visual identification.</summary>
        [Newtonsoft.Json.JsonProperty("physical_reference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,16}$")]
        public string Physical_reference { get; set; }
    
        /// <summary>Multi-language human-readable directions when more detailed information on how to reach the EVSE from the Location is required.</summary>
        [Newtonsoft.Json.JsonProperty("directions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayText Directions { get; set; }
    
        /// <summary>The restrictions that apply to the parking spot.</summary>
        [Newtonsoft.Json.JsonProperty("parking_restrictions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParkingRestriction Parking_restrictions { get; set; }
    
        /// <summary>Links to images related to the EVSE such as photos or logos.</summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Images { get; set; }
    
        /// <summary>Timestamp when this EVSE or one of its Connectors was last updated (or created).</summary>
        [Newtonsoft.Json.JsonProperty("last_updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Last_updated { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location 
    {
        /// <summary>Uniquely identifies the location within the CPOs platform (and suboperator platforms). This field can never be changed, modified or renamed.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,39}$")]
        public string Id { get; set; }
    
        /// <summary>The general type of the charge point location.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocationType Type { get; set; }
    
        /// <summary>Display name of the location.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,255}$")]
        public string Name { get; set; }
    
        /// <summary>Street/block name and house number if available.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,45}$")]
        public string Address { get; set; }
    
        /// <summary>City or town.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,45}$")]
        public string City { get; set; }
    
        /// <summary>Postal code of the location.</summary>
        [Newtonsoft.Json.JsonProperty("postal_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,10}$")]
        public string Postal_code { get; set; }
    
        /// <summary>ISO 3166-1 alpha-3 code for the country of this location.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,3}$")]
        public string Country { get; set; }
    
        /// <summary>Coordinates of the location.</summary>
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Coordinates { get; set; }
    
        /// <summary>Geographical location of related points relevant to the user.</summary>
        [Newtonsoft.Json.JsonProperty("related_locations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalGeoLocation> Related_locations { get; set; }
    
        /// <summary>Human-readable directions on how to reach the location.</summary>
        [Newtonsoft.Json.JsonProperty("directions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisplayText> Directions { get; set; }
    
        /// <summary>Information of the operator. When not specified, the information retrieved from the api_info endpoint should be used instead.</summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessDetails Operator { get; set; }
    
        /// <summary>Information of the suboperator if available.</summary>
        [Newtonsoft.Json.JsonProperty("suboperator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessDetails Suboperator { get; set; }
    
        /// <summary>Information of the owner if available.</summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessDetails Owner { get; set; }
    
        /// <summary>One of IANA tzdata's TZ-values representing the time zone of the location. Examples: "Europe/Oslo", "Europe/Zurich". (http://www.iana.org/time-zones)</summary>
        [Newtonsoft.Json.JsonProperty("time_zone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^.{1,255}$")]
        public string Time_zone { get; set; }
    
        /// <summary>if the EVSEs are still charging outside the opening hours of the location. E.g. when the parking garage closes its barriers over night, is it allowed to charge till the next morning? Default: true</summary>
        [Newtonsoft.Json.JsonProperty("charging_when_closed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Charging_when_closed { get; set; }
    
        /// <summary>Links to images related to the location such as photos or logos.</summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Image> Images { get; set; }
    
        /// <summary>Timestamp when this Location or one of its EVSEs or Connectors were last updated (or created).</summary>
        [Newtonsoft.Json.JsonProperty("last_updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Last_updated { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExceptionalPeriod 
    {
        /// <summary>Begin of the exception.</summary>
        [Newtonsoft.Json.JsonProperty("period_begin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Period_begin { get; set; }
    
        /// <summary>End of the exception.</summary>
        [Newtonsoft.Json.JsonProperty("period_end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$")]
        public string Period_end { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Regular recurring operation or access hours</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RegularHours 
    {
        /// <summary>Number of day in the week, from Monday (1) till Sunday (7)</summary>
        [Newtonsoft.Json.JsonProperty("weekday", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weekday { get; set; }
    
        /// <summary>Begin of the regular period given in hours and minutes. Must be in 24h format with leading zeros. Example: "18:15". Hour/Minute separator: ":" Regex: [0-2][0-9]:[0-5][0-9]</summary>
        [Newtonsoft.Json.JsonProperty("period_begin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-2][0-9]:[0-5][0-9]$")]
        public string Period_begin { get; set; }
    
        /// <summary>End of the regular period, syntax as for period_begin. Must be later than period_begin.</summary>
        [Newtonsoft.Json.JsonProperty("period_end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-2][0-9]:[0-5][0-9]$")]
        public string Period_end { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Opening and access hours of the location.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hours 
    {
        /// <summary>Regular hours, weekday based. Should not be set for representing 24/7 as this is the most common case.</summary>
        [Newtonsoft.Json.JsonProperty("regular_hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegularHours Regular_hours { get; set; }
    
        /// <summary>True to represent 24 hours a day and 7 days a week, except the given exceptions.</summary>
        [Newtonsoft.Json.JsonProperty("twentyfourseven", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Twentyfourseven { get; set; }
    
        /// <summary>Exceptions for specified calendar dates, time-range based. Periods the station is operating/accessible. Additional to regular hours. May overlap regular rules.</summary>
        [Newtonsoft.Json.JsonProperty("exceptional_openings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExceptionalPeriod Exceptional_openings { get; set; }
    
        /// <summary>Exceptions for specified calendar dates, time-range based. Periods the station is not operating/accessible. Overwriting regularHours and exceptionalOpenings. Should not overlap exceptionalOpenings.</summary>
        [Newtonsoft.Json.JsonProperty("exceptional_closings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExceptionalPeriod Exceptional_closings { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VersionsResponse : ResponseStatus
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> Data { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ResponseStatus 
    {
        [Newtonsoft.Json.JsonProperty("status_code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status_code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status_message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timestamp { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108